{
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig.json to read more about this file */
		/* Basic Options */
		// incremental: 컴파일이 될 때마다 계속 새롭게 모든 파일을 다 컴파일하는 것이 아니라
		// 이전 컴파일된 파일과 비교해 수정된 사항이 없다면 그 부분을 유지하고
		// 수정된 사항만 컴파일.  
		// "incremental": true,                   /* Enable incremental compilation */
		// target: 어떤 버전으로 컴파일할지 설정
		"target": "es5", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
		// module: 모듈 정보를 어떻게 할건지 설정
		"module": "commonjs", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
		// lib: 어떤 라이브러리를 사용할건지 설정. 보통은 따로 설정하지 않고 target에서 나오는걸 그대로 사용.
		// "lib": [],                             /* Specify library files to be included in the compilation. */
		// allowJs: 프로젝트안에서 JS파일을 같이 쓸건지, TS/JS 혼용할건지 결정.
		// "allowJs": true, /* Allow javascript files to be compiled. */
		// checkJs: JS파일에서 무언가 잘못하고 있다면 에러가 뜨도록 설정.
		// "checkJs": true, /* Report errors in .js files. */
		// jsx: react 관련된걸 사용할건지 설정
		// "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
		// declaration: 타입 정의에 관련된 것. 내가 작성한 코드를 라이브러리 형식으로 제공할 것이 아니라면 잘 사용하지 않음.
		// "declaration": true,                   /* Generates corresponding '.d.ts' file. */
		// "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
		// sourceMap: 디버깅시 사용.
		"sourceMap": true,                     /* Generates corresponding '.map' file. */
		// outFile: 작성한 ts 파일을 하나의 js파일로 만들때 사용. 
		// "outFile": "./",                       /* Concatenate and emit output to single file. */
		"outDir": "./build",                        /* Redirect output structure to the directory. */
		"rootDir": "./src", /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
		// incremental과 함께 사용. 앞에서 빌드된 정보를 기억해 다음 빌드시 더 빠르게 빌드를 도와줌.
		// "composite": true,                     /* Enable project compilation */
		// incremental 옵션이 true이면, 관련된 이 정보를 담을 수 있는 파일을 지정하는 옵션.
		// "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
		// removeComments: 코멘트를 다 지워주는 옵션
		// "removeComments": true, /* Do not emit comments to output. */
		// noEmit: 컴파일 에러체크만 수행, js 변환하지 않음.
		// "noEmit": true,                        /* Do not emit outputs. */
		// importHelpers, downlevelIteration : 타입스크립트 코드를 아주 오래전의 JS 코드로 변환하면 문제가 될 수 있음. 그런 경우를 도와주는 옵션. (잘 사용되지 않음.)
		// "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
		// "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
		// isolatedModules: 각각의 파일을 다른 모듈로 변환해서 만드는 것
		// "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
		/* Strict Type-Checking Options */
		"strict": true, /* Enable all strict type-checking options. */
		// 원하는 것만 지정해서 엄격한 모드를 사용할 수 있음. 
		// "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
		// "strictNullChecks": true,              /* Enable strict null checks. */
		// "strictFunctionTypes": true,           /* Enable strict checking of function types. */
		// "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
		// "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
		// "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
		// "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
		/* Additional Checks */
		// "noUnusedLocals": true,                /* Report errors on unused locals. */
		// "noUnusedParameters": true,            /* Report errors on unused parameters. */
		// "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
		// "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
		// "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */
		/* Module Resolution Options */
		// "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
		// "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
		// "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
		// "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
		// "typeRoots": [],                       /* List of folders to include type definitions from. */
		// "types": [],                           /* Type declaration files to be included in compilation. */
		// "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
		"esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
		// "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
		// "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */
		/* Source Map Options */
		// "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
		// "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
		// "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
		// "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
		/* Experimental Options */
		// "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
		// "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
		/* Advanced Options */
		"skipLibCheck": true, /* Skip type checking of declaration files. */
		"forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
	},
	// 어떤 파일들을 추가할건지, 제외할건지 설정 가능.
	// 원하는 것을 컴파일 제외
	"exclude": [
		"./src/dev.ts"
	],
	// 원하는 것만 컴파일
}